/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DoctorRole;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Organization.AnalystOrganization;
import Business.Organization.DoctorOrganization;
import Business.Organization.LabOrganization;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Patient.Patients;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.PatientAnalysisWorkRequest;
import Business.WorkQueue.TechRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dhairyasheel
 */
public class DoctorPatientDetails extends javax.swing.JPanel {

    /**
     * Creates new form DoctorPatientDetails
     */
    private JPanel userProcessContainer;
    private DoctorOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private  EcoSystem business;
    public DoctorPatientDetails(JPanel userProcessContainer, UserAccount account, DoctorOrganization organization, Enterprise enterprise,  EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.business = business;
        //setWorkRequestUpdate(account);
        populatePatientsTable(account);
        populateRequestTable(account);
      //  valueLabel.setText(enterprise.getName());
    }

    public void populatePatientsTable(UserAccount account){
         DefaultTableModel model = (DefaultTableModel)patientDetailsjTable.getModel();
       String name = "";
        model.setRowCount(0);
        for(Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if(organization instanceof DoctorOrganization){
                for(Employee emp  :  organization.getEmployeeDirectory().getEmployeeList()){
                     if(account.getUsername().equalsIgnoreCase(emp.getUserName())){
                         name = emp.getName(); 
                     }
                }
            }
            if(organization instanceof PatientOrganization){
                
                for(Patients pt : organization.getPatientsDirectory().getPatientsList()){
                    
                if(pt.getAssignedDoc().equalsIgnoreCase(name)){
                    
                    
                    Object[] row = new Object[4];
            row[0] = pt;
            row[1] = pt.getAge();
            row[2] = pt.getWeight();
            row[3] = pt.getAssignedDoc();
            
            model.addRow(row);
                }
                    
                }
            }
        }        
    }
    
    public void populateRequestTable(UserAccount account){
         DefaultTableModel model = (DefaultTableModel)reportjTable1.getModel();
       //String name = "";
        model.setRowCount(0);
                
            for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            if(request instanceof PatientAnalysisWorkRequest){
            Object[] row = new Object[4];
            row[0] = ((PatientAnalysisWorkRequest) request).getPatient().getName();
            if(request.getStatus() != null){
            row[1] = request.getStatus();
            } else{
                row[1] = "Request Sent";
            }
            if(request.getReceiver() != null){
            row[2] = request.getReceiver().getEmployee().getName();
            }

            Double result = ((PatientAnalysisWorkRequest) request).getSurvivalRate();
            row[3] = result == 0 ? "Waiting" : result;
            
            model.addRow(row);
            }
        }
            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        patientDetailsjTable = new javax.swing.JTable();
        labReportsJButton = new javax.swing.JButton();
        requestAnalysisJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        backjButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        reportjTable1 = new javax.swing.JTable();

        patientDetailsjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient ID", "Patient Name", "Doctor", "BP"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patientDetailsjTable);

        labReportsJButton.setText("Lab Reports");
        labReportsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labReportsJButtonActionPerformed(evt);
            }
        });

        requestAnalysisJButton.setText("Request Analysis");
        requestAnalysisJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestAnalysisJButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel2.setText("Patient Details");

        backjButton1.setText("<< Back");
        backjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButton1ActionPerformed(evt);
            }
        });

        reportjTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient Name", "Status", "Reciever", "Survival Rate"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(reportjTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(366, 366, 366))
            .addGroup(layout.createSequentialGroup()
                .addGap(361, 361, 361)
                .addComponent(jLabel2)
                .addGap(0, 764, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(189, 189, 189)
                        .addComponent(labReportsJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(requestAnalysisJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(backjButton1)))
                .addContainerGap(720, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labReportsJButton)
                    .addComponent(requestAnalysisJButton))
                .addGap(51, 51, 51)
                .addComponent(backjButton1)
                .addContainerGap(195, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void labReportsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labReportsJButtonActionPerformed

        int selectedRow = patientDetailsjTable.getSelectedRow();
        //LabTestWorkRequest request = new LabTestWorkRequest();
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select one patient!");
            return;
        }
        
        Patients p = (Patients)patientDetailsjTable.getValueAt(selectedRow, 0);
        /*request.setPatient(p);
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        request.getPatient().setName(p.getName());*/
        
      /*  Organization org = null;
        for(Enterprise ent : business.getNetworkList().get(0).getEnterpriseDirectory().getEnterpriseList())
        for (Organization organization : ent.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof LabOrganization){
                org = organization;
                break;
            }
        }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(request);
            userAccount.getWorkQueue().getWorkRequestList().add(request);
        }*/
      
        DoctorWorkAreaJPanel requestlabtestJPanel = new DoctorWorkAreaJPanel(userProcessContainer, userAccount,organization, enterprise, p);
        userProcessContainer.add("requestlabtestJPanel", requestlabtestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_labReportsJButtonActionPerformed

   /* public void setWorkRequestUpdate(UserAccount account){

        for(WorkRequest wk : account.getWorkQueue().getWorkRequestList()){
            if(wk instanceof PatientAnalysisWorkRequest){
             if(wk.getStatus() != null){
                 
                 double pr = ((PatientAnalysisWorkRequest)wk).getSurvivalRate();
                 
                 survivalRate.setText(Double.toString(pr));
                 
             }
            }
         }
          
    }*/
     
    private void requestAnalysisJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestAnalysisJButtonActionPerformed

        int selectedRow = patientDetailsjTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        PatientAnalysisWorkRequest patlist =  new PatientAnalysisWorkRequest();
        
        Patients p = (Patients)patientDetailsjTable.getValueAt(selectedRow, 0);
                
        
        patlist.setPatient(p);
        
        Organization org = null;
        for(Enterprise ent : business.getNetworkList().get(0).getEnterpriseDirectory().getEnterpriseList())
        for (Organization organization : ent.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof AnalystOrganization){
                org = organization;
                break;
            }
        }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(patlist);
            userAccount.getWorkQueue().getWorkRequestList().add(patlist);
        }
        populateRequestTable(userAccount);
        
    }//GEN-LAST:event_requestAnalysisJButtonActionPerformed

    private void backjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backjButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backjButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton labReportsJButton;
    private javax.swing.JTable patientDetailsjTable;
    private javax.swing.JTable reportjTable1;
    private javax.swing.JButton requestAnalysisJButton;
    // End of variables declaration//GEN-END:variables
}
