/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.AnalystRole;

import Business.EcoSystem;
import Business.EmailPkg.EMailClass;
import Business.Enterprise.Enterprise;
import Business.Organization.AnalystOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PatientAnalysisWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.DoctorRole.DoctorWorkAreaJPanel;

/**
 *
 * @author Dhairyasheel
 */
public class AnalysisDetailsPageJpanel extends javax.swing.JPanel {

    /**
     * Creates new form AnalysisDetailsPageJpanel
     */
    JPanel userProcessContainer; UserAccount account; AnalystOrganization analystOrganization; Enterprise enterprise; 
    EcoSystem business;
    
    public AnalysisDetailsPageJpanel(JPanel userProcessContainer, UserAccount account, AnalystOrganization analystOrganization, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.analystOrganization = analystOrganization;
        this.business = business;
        this.enterprise = enterprise;
        populatePatientsTable(account);
    }

        public void populatePatientsTable(UserAccount account){
         DefaultTableModel model = (DefaultTableModel)patientDetailsjTable.getModel();
      
        model.setRowCount(0);
        
        for(WorkRequest request : analystOrganization.getWorkQueue().getWorkRequestList()){
            
            Object[] row = new Object[8];
            row[0] = ((PatientAnalysisWorkRequest)request).getPatient().getName();
            row[1] = ((PatientAnalysisWorkRequest)request).getPatient().getAssignedDoc();
            row[2] = ((PatientAnalysisWorkRequest)request).getPatient().getVitalRecords().getPulse() ;
            row[3] = ((PatientAnalysisWorkRequest)request).getPatient().getVitalRecords().getBloodPreassure();
            row[4] = ((PatientAnalysisWorkRequest)request).getPatient().getVitalRecords().getTemperature();
            row[5] = ((PatientAnalysisWorkRequest)request).getPatient().getVitalRecords().getrRate();
            row[6] = ((PatientAnalysisWorkRequest)request).getSurvivalRate();
            row[7] = (PatientAnalysisWorkRequest)request;
            
            model.addRow(row);
        }
                }
               
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        patientDetailsjTable = new javax.swing.JTable();
        analyzeData = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        patientDetailsjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient Name", "Doctor", "Pulse", "Blood Pressure", "Temperature", "Respiratory Rate", "Survival Rate", "Object"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patientDetailsjTable);
        if (patientDetailsjTable.getColumnModel().getColumnCount() > 0) {
            patientDetailsjTable.getColumnModel().getColumn(7).setMinWidth(0);
            patientDetailsjTable.getColumnModel().getColumn(7).setPreferredWidth(0);
            patientDetailsjTable.getColumnModel().getColumn(7).setMaxWidth(0);
        }

        analyzeData.setText("Analyze Data");
        analyzeData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeDataActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel1.setText("Survival Rate Analysis");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(173, 173, 173)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(193, 193, 193)
                                .addComponent(analyzeData, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(39, 39, 39)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(analyzeData)
                .addContainerGap(251, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
     
    private void analyzeDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeDataActionPerformed
        // TODO add your handling code here:
        int selectedRow = patientDetailsjTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        PatientAnalysisWorkRequest request = (PatientAnalysisWorkRequest)patientDetailsjTable.getValueAt(selectedRow, 7);
        
        int survivalrate =100;
        
        int bp = Integer.parseInt(request.getPatient().getVitalRecords().getBloodPreassure());
        int pulse  = request.getPatient().getVitalRecords().getPulse();
        int temp = request.getPatient().getVitalRecords().getTemperature();
        int resprate =  request.getPatient().getVitalRecords().getrRate();
        
        
        if(bp>120 || bp<80){
            survivalrate = survivalrate - 25;
        }
        System.out.println(""+survivalrate);
        if(pulse>130 || pulse<45){
            survivalrate = survivalrate - 25;
        }
        System.out.println(""+survivalrate);
         if(temp>104 || temp<85){
            survivalrate = survivalrate - 25;
        }
         System.out.println(""+survivalrate);
          if(resprate>34 || resprate<10){
            survivalrate = survivalrate - 15;
        }
        
        request.setSurvivalRate(survivalrate);
        request.setStatus("Completed");
        request.setReceiver(account);
        sendEmail(request);
        populatePatientsTable(account);
    }//GEN-LAST:event_analyzeDataActionPerformed

    public void sendEmail(PatientAnalysisWorkRequest request){
        String[] to = {request.getPatient().getAssignedDocUsername().toString()};

        try {
            if (EMailClass.sendMail("onkkr123", "202199412", "Survival Rate of "+request.getPatient().getName()+" is "+request.getSurvivalRate(), to)) {
                System.out.println("sent");
            } else {
                System.out.println("error");
            }

        } catch (MessagingException ex) {
            Logger.getLogger(DoctorWorkAreaJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(this, "Analysis Report has been sent to the Doctor");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analyzeData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable patientDetailsjTable;
    // End of variables declaration//GEN-END:variables
}
